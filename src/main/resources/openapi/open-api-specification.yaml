openapi: 3.0.3
info:
  title: TeamApp
  description: "Documentation for TeamApp - competency matrix application depiciting skills of the company's employees" 
  contact:
    email: filippawlowski01@wp.pl
  version: 0.0.1
servers:
  - url: http://localhost:4200
tags:
  - name: employee
    description: Everything about the Employee
  - name: project
    description: Access Company's projects
  - name: skill
    description: Access registered skills
paths:
  /api/employees:
    get:
      tags:
        - employee
      summary: Returns a list of all employees
      description: Returns a list of all employees
      operationId: getEmployees
      responses:
        '200':
          description: Successful fetch of employees
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Employee'
    post:
      tags:
        - employee
      summary: Add a new employee to the company
      description: Add a new employees to the company
      operationId: addEmployee
      requestBody:
        description: Create a new employee in the company
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Employee'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        '405':
          description: Invalid input
  
  /api/employees/{employeeId}:
    put:
      tags:
        - employee
      summary: Update an existing employee
      description: Update an existing employee by ID
      operationId: updateEmployee
      parameters:
        - name: employeeId
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent employee in the company
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Employee'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        '400':
          description: Invalid ID supplied
        '404':
          description: Employee not found
        '405':
          description: Validation exception
          
    delete:
      tags:
        - employee
      summary: Deletes an employee
      description: delete an employee
      operationId: deleteEmployee
      parameters:
        - name: employeeId
          in: path
          description: ID of employee to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful delete of employee
        '404':
          description: Employee not found

    get:
      tags:
        - employee
      summary: Find employee by ID
      description: Find employee by ID
      operationId: getEmployee
      parameters:
        - name: employeeId
          in: path
          description: ID of employee to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        '400':
          description: Invalid ID supplied
        '404':
          description: Employee not found
        '409':
          description: Delete impossible

  /api/employees/findBySkills:
    get:
      tags:
        - employee
      summary: Finds Employees by skills
      description: Multiple skill values can be provided with comma separated strings
      operationId: findEmployeesBySkills
      parameters:
        - name: skills
          in: query
          description: Skill values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Employee'
        '400':
          description: Invalid skills value
        '406':
          description: No matching Employee found

  /api/employees/findByProject:
    get:
      tags:
        - employee
      summary: Finds Employees by Project ID
      description: Returns all Employees that are assigned to particular project.
      operationId: findEmployeesByProject
      parameters:
        - name: projectId
          in: query
          description: ID of the Project, from which Employees are asked  
          required: true
          schema:
            type: string
            
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Employee'
        '400':
          description: Invalid ID supplied
        '404':
          description: Project not found
        '406':
          description: No matching Employee found
  
  /api/projects:
    get:
      tags:
        - project
      summary: Returns all company's projects
      description: Returns all company's projects
      operationId: getProjects
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
  
  /api/skills:
    get:
      tags:
        - skill
      summary: Returns all registered skills
      description: Returns an array of skills that are existent in the system
      operationId: getSkills
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EmployeeSkill'
                  
components:
  schemas:
    Employee:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: '123213-das213-1323fadg-123431'
        name:
          type: string
          example: 'Walter'
        surname:
          type: string
          example: 'Krasinski'
        hireDate:
          type: string
          format: date-time
        skills:
          type: array
          items:
            $ref: '#/components/schemas/EmployeeSkill'
        projects:
          type: array
          items:
            $ref: '#/components/schemas/Project'
    
    EmployeeSkill:
      type: object
      properties:
        name:
          type: string
          example: 'Python'
        level:
          type: string
          description: Skill level
          example: advanced
          enum:
            - beginner
            - intermediate
            - advanced    
        
    Project:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: '123213-das213-1323fadg-123431'
        name:
          type: string
          example: 'LKF Cooking App'
        startDate:
          type: string
          format: date-time
        deadline:
          type: string
          format: date-time

    Skill:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: '123213-das213-1323fadg-123431'
        name:
          type: string
          example: 'Python'

  requestBodies:
    Employee:
      description: Employee object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Employee'
    